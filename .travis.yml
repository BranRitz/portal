sudo: required
addons:
    chrome: stable
dist: trusty
cache:
    pip: true
    directories:
    - node_modules
    - static
python:
    - "2.7"
os:
    - linux
stages:
    - lint
    - test
matrix:
    include:
        - name: "npm test"
          language: python
          python:
              - "2.7"
          stage: test
          install:
              - pip install -r requirements.txt
              - find designsafe/settings/* -name *.sample.* | while read line; do cp $line ${line/sample\./}; done;
              - ./manage.py collectstatic --settings=designsafe.settings.test_settings --no-input --link -i cms -i admin -i djangocms_text_ckeditor -i node_modules -i angular* -i babel* -i rxjs > /dev/null
              - npm install
              - npm install -g codecov
          script:
              - npm run test
          after_script:
              - npm run report-coverage
        - name: "unittests"
          language: python
          python:
              - "2.7"
          stage: test
          install: 
              - pip install -r requirements.txt
              - find designsafe/settings/* -name *.sample.* | while read line; do cp $line ${line/sample\./}; done;
              - ./manage.py collectstatic --settings=designsafe.settings.test_settings --no-input --link -i cms -i admin -i djangocms_text_ckeditor -i node_modules -i angular* -i babel* -i rxjs > /dev/null
          script:
              - coverage run --branch --source='designsafe' manage.py test --settings=designsafe.settings.test_settings --pattern=tests.py -v2
          after_script:
              - coverage xml
              - codecov
        - name: "Flake8"
          language: python
          python:
              - "2.7"
          stage: lint
          install: 
              - pip install -r requirements.txt
              - find designsafe/settings/* -name *.sample.* | while read line; do cp $line ${line/sample\./}; done;
              - ./manage.py collectstatic --settings=designsafe.settings.test_settings --no-input --link -i cms -i admin -i djangocms_text_ckeditor -i node_modules -i angular* -i babel* -i rxjs > /dev/null
          script:
              - flake8 designsafe
        - name: "pylint"
          language: python
          python:
              - "2.7"
          stage: lint
          install: 
              - pip install -r requirements.txt
              - find designsafe/settings/* -name *.sample.* | while read line; do cp $line ${line/sample\./}; done;
              - ./manage.py collectstatic --settings=designsafe.settings.test_settings --no-input --link -i cms -i admin -i djangocms_text_ckeditor -i node_modules -i angular* -i babel* -i rxjs > /dev/null
          script:
              - pylint designsafe
        - name: "pydocstyle"
          language: python
          python:
              - "2.7"
          stage: lint
          install: 
              - pip install -r requirements.txt
              - find designsafe/settings/* -name *.sample.* | while read line; do cp $line ${line/sample\./}; done;
              - ./manage.py collectstatic --settings=designsafe.settings.test_settings --no-input --link -i cms -i admin -i djangocms_text_ckeditor -i node_modules -i angular* -i babel* -i rxjs > /dev/null
          script:
              - pydocstyle designsafe
        - name: "eslint"
          language: node_js
          node_js:
              - "node"
          stage: lint
          install:
              - npm install sync-exec
              - npm install
          script:
              - npm run-script lint
    allow_failures:
        - name: "Flake8"
          language: python
          python:
              - "2.7"
          stage: lint
          install: 
              - pip install -r requirements.txt
              - find designsafe/settings/* -name *.sample.* | while read line; do cp $line ${line/sample\./}; done;
              - ./manage.py collectstatic --settings=designsafe.settings.test_settings --no-input --link -i cms -i admin -i djangocms_text_ckeditor -i node_modules -i angular* -i babel* -i rxjs > /dev/null
          script:
              - flake8 designsafe
        - name: "pylint"
          language: python
          python:
              - "2.7"
          stage: lint
          install: 
              - pip install -r requirements.txt
              - find designsafe/settings/* -name *.sample.* | while read line; do cp $line ${line/sample\./}; done;
              - ./manage.py collectstatic --settings=designsafe.settings.test_settings --no-input --link -i cms -i admin -i djangocms_text_ckeditor -i node_modules -i angular* -i babel* -i rxjs > /dev/null
          script:
              - pylint designsafe
        - name: "pydocstyle"
          language: python
          python:
              - "2.7"
          stage: lint
          install: 
              - pip install -r requirements.txt
              - find designsafe/settings/* -name *.sample.* | while read line; do cp $line ${line/sample\./}; done;
              - ./manage.py collectstatic --settings=designsafe.settings.test_settings --no-input --link -i cms -i admin -i djangocms_text_ckeditor -i node_modules -i angular* -i babel* -i rxjs > /dev/null
          script:
              - pydocstyle designsafe
        - name: "eslint"
          language: node_js
          node_js:
              - "node"
          stage: lint
          install:
              - npm install sync-exec
              - npm install
          script:
              - npm run-script lint
before_script:
    - df -h
